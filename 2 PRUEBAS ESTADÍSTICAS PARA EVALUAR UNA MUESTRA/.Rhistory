chi2q<qchisq(1-0.09,n-1)
chi2q>qchisq(1-0.09,n-1) #cae en la zona  rechazo H0
qchisq(0.09,n-1)
qchisq(1-0.09,n-1)
s2
osigma2 <- 2.5
n2
chi2q <- ((n2-1)*s2)/(osigma2);chi2q
qchisq(0.09,n-1)
qchisq(1-0.09,n-1)
chi2q <- ((n2-1)*s2)/(osigma2);chi2q
n2
s2
s2
knitr::opts_chunk$set(echo = TRUE)
choose(2,4)
choose(4,2)
library(ggtols)
library(gtools)
library(gtools)
choose(4,2)
combinations(n=10, r=3, v=x)
library(gtools)
choose(4,2)
library(gtools)
combinations(n=10, r=3)
combinations(n=4, r=2)
library(gtools)
combinations(n=4, r=2,repeats.allowed = TRUE)
choose(4,2)
combinations(n=4, r=2,repeats.allowed = F)
choose(4,2)
combinations(n=4, r=2,repeats.allowed = F)
choose(4,2)
library(gtools)
combinations(n=4, r=2,repeats.allowed = F)
combinations(n=4, r=2,repeats.allowed = TRUE)
library(rcompanion)
knitr::opts_chunk$set(echo = TRUE)
choose(4,2)
library(gtools)
combinations(n=4, r=2,repeats.allowed = F)
permutations(n= 4, r= 2, v=x, repeats.allowed = FALSE)
permutations(n= 4, r= 2, repeats.allowed = FALSE)
permutations(n= 4, r= 2, repeats.allowed = FALSE)
nrow(permutations(n= 4, r= 2, repeats.allowed = FALSE))
nrow(combinations(n=4, r=2,repeats.allowed = TRUE))
combinations(n=4, r=2,repeats.allowed = TRUE)
nrow(combinations(n=4, r=2,repeats.allowed = TRUE))
permutations(n= 4, r= 2, repeats.allowed = T)
nrow(permutations(n= 4, r= 2, repeats.allowed = T))
?permutations()
?permutations
library(gtools)
permutations(n= 8, r= 4, repeats.allowed = FALSE)
nrow(permutations(n= 8, r= 4, repeats.allowed = FALSE))
library(gtools)
nrow(permutations(n= 8, r= 4, repeats.allowed = FALSE))
library(gtools)
nrow(permutations(n= 8, r= 4, repeats.allowed = FALSE))
N <- 4
n <- 2
factorial(N)/(factorial(n)*(factorial(N-n)))
N <- 4
n <- 2
factorial(N)/(factorial(n)*(factorial(N-n)))
N <- 4
n <- 2
factorial(N)/(factorial(n)*(factorial(N-n)))
?combinations
?combinations
choose(4,2)
library(gtools)
combinations(n=4, r=2,repeats.allowed = F)
?combinations
combinations(n=4, r=2,repeats.allowed = TRUE)
nrow(combinations(n=4, r=2,repeats.allowed = TRUE))
N <- 4
n <- 2
factorial(N)/(factorial(n)*(factorial(N-n)))
N <- 4
n <- 2
factorial(N+n-1)/(factorial(n)*(factorial(N-1)))
library(gtools)
nrow(permutations(n= 8, r= 4, repeats.allowed = FALSE))
N <- 8
n <- 4
factorial(N)/(factorial(n)*(factorial(N-n)))
library(gtools)
nrow(permutations(n= 8, r= 4, repeats.allowed = FALSE))
N <- 8
n <- 4
factorial(N)/(factorial(n)*(factorial(N-n)))
N <- 4
n <- 2
factorial(N)/(factorial(N-n))
N <- 8
n <- 4
factorial(N)/(factorial(N-n))
``
N <- 8
n <- 4
factorial(N)/(factorial(N-n))
choose(5,3)
choose(5,3)
combinations(n=5, r=3,repeats.allowed = F)
V <-c("1A","2A","3A","4A","5A","1B","2B","3B")
combinations(n=5, r=3,repeats.allowed = F)
V <-c("1A","2A","3A","4A","5A","1B","2B","3B")
combinations(n=5, r=3,v = V,repeats.allowed = F)
V <-c("A1","A2","A3","A4","A5","B1","B2","B3")
combinations(n=5, r=3,v = V,repeats.allowed = F)
V <-c("A1","A2","A3","A4","A5","B1","B2","B3")
combinations(n=5, r=3,v = V,repeats.allowed = F)
V <-c("A1","A2","A4","A5","B1","B2","B3","A3")
combinations(n=5, r=3,v = V,repeats.allowed = F)
V <-c("A1","A2","A3","A4","A5","B1","B2","B3")
combinations(n=5, r=3,v = V,repeats.allowed = F)
V <-c("A1","A2","A3","A4","A5","B1","B2","B3")
combinations(n=5, r=3,v = V,repeats.allowed = F)
V <-c("A1","A2","A3","A4","A5","B1","B2","B3")
combinations(n=5, r=3,v = V,repeats.allowed = F)
V <-c("A1","A2","A3","A4","A5","B1","B2","B3")
combinations(n=8, r=3,v = V,repeats.allowed = F)
V <-c("A1","A2","A3","A4","A5","B1","B2","B3")
combinations(n=8, r=3,v = V,repeats.allowed = F)
combinations(n=5, r=3,v = V,repeats.allowed = F)
knitr::opts_chunk$set(echo = TRUE)
U <- c("Negra","Negra","Blanca","Blanca","Blanca")
m <- 5*5*5 #(el primer)()
m <- 5*5*5 #(el primer)()
m
**Definimos una variable aleatoria**
Una función f(x) es llamada funcion de probabilidad de variable aleatoria X si tiene como dominio a Rx(conjunto de valores que asume la variable aleatoria) y como rango un conjunto numero reales que
cumplen las siguientes probabilidades.
knitr::opts_chunk$set(echo = TRUE)
x<-seq(-4,4,0.1) #secuencia -4 a 4 con espaciamiento de 0.1
y1<-pnorm(x)# probabilidad de que la variable aleatoria X tome un valor menor o igual que x
y2<-dnorm(x)# la probabilidad de obtener ese valor
sum(y2)
plot(x,y1,type="l",col="blue",ylab="")
points(x,y2,type="l", col="red",ylab="")
#otra forma
plot(x,y1,type="l", col="blue",ylab="")
lines(x,y2,type="l",col="red",ylab="")
y1
y2
plot(x,y1,type="l",col="blue",ylab="")
x<-seq(-4,4,0.1) #secuencia -4 a 4 con espaciamiento de 0.1
y1<-pnorm(x)# probabilidad de que la variable aleatoria X tome un valor menor o igual que x
y2<-dnorm(x)# la probabilidad de obtener ese valor
sum(y2)
points(x,y2,type="l", col="red",ylab="") # Grafica Función de probabilidad o funcion de densidad
x<-seq(-4,4,0.1) #secuencia -4 a 4 con espaciamiento de 0.1
y1<-pnorm(x)# probabilidad de que la variable aleatoria X tome un valor menor o igual que x
y2<-dnorm(x)# la probabilidad de obtener ese valor
sum(y2)
plot(x,y2,type="l", col="red",ylab="") # Grafica Función de probabilidad o funcion de densidad
y1<-pnorm(x)# probabilidad de que la variable aleatoria X tome un valor menor o igual que x
plot(x,y1,type="l", col="blue",ylab="")
#otra forma
plot(x,y1,type="l", col="blue",ylab="")
lines(x,y2,type="l",col="red",ylab="")
plot(x,y1,type="l",col="blue",ylab="")
points(x,y2,type="l", col="red",ylab="")
knitr::opts_chunk$set(echo = TRUE)
1-pbinom(26,1/3)
1-pbino(26,1/3)
1-pbinom(26,1/3)
1-pbinom(q = 1/3,size = 26)
1-pbinom(q = 1/3,size = 26)
1-pbinom(17,26,1/3)
choose(26,17)
choose(26,17)*(1/3)^18*(1-1/3)^(26-17)
1-pbinom(17,26,1/3)
choose(26,17)*(1/3)^17*(1-1/3)^(26-17)
choose(26,17)*(1/3)^17*(1-(1/3)^(26-17)
choose(26,17)*(1/3)^17*(1-(1/3)^(26-17)
choose(26,17)*(1/3)^17*(1-(1/3)^(26-17)
choose(26,17)*(1/3)^17*(1-(1/3))^(26-17)
1-choose(26,17)*(1/3)^17*(1-(1/3))^(26-17)
pbinom(17,26,1/3)
1-pbinom(17,26,1/3)
y <- c(0:17)
sum(choose(26,y)*(1/3)^y*(1-(1/3))^(26-y))
y <- c(0:17)
1-sum(choose(26,y)*(1/3)^y*(1-(1/3))^(26-y))
y <- c(17:26)
sum(choose(26,y)*(1/3)^y*(1-(1/3))^(26-y)) # Probabilidad acumulada hasta
y <- c(0:17)
1-sum(choose(26,y)*(1/3)^y*(1-(1/3))^(26-y)) # Probabilidad acumulada hasta
y <- c(17:26)
sum(choose(26,y)*(1/3)^y*(1-(1/3))^(26-y)) # Probabilidad acumulada hasta
y <- c(0:17)
1-sum(choose(26,y)*(1/3)^y*(1-(1/3))^(26-y)) # Probabilidad acumulada hasta
y <- c(18:26)
sum(choose(26,y)*(1/3)^y*(1-(1/3))^(26-y)) # Probabilidad acumulada hasta
y <- c(0:18)
1-sum(choose(26,y)*(1/3)^y*(1-(1/3))^(26-y)) # Probabilidad acumulada hasta
y <- c(18:26)
sum(choose(26,y)*(1/3)^y*(1-(1/3))^(26-y)) # Probabilidad acumulada hasta
y <- c(0:18)
1-sum(choose(26,y)*(1/3)^y*(1-(1/3))^(26-y)) # Probabilidad acumulada hasta
y <- c(18:26)
sum(choose(26,y)*(1/3)^y*(1-(1/3))^(26-y)) # Probabilidad acumulada hasta
y <- c(0:17)
1-sum(choose(26,y)*(1/3)^y*(1-(1/3))^(26-y)) # Probabilidad acumulada hasta
binom.test(17,26,1/3,"g")
binom.test(17,26,1/3,"l")
binom.test(17,26,1/3,"g")
#La opción lower.tail permite calcular P(X>x)
binom.test(17,26,1/3,lower.tail=FALSE)
#La opción lower.tail permite calcular P(X>x)
binom.test(17,26,1/3,lower.tail=FALSE)
#P-valor= P[Y≥18]
1-pbinom(17,26,1/3)
#P-valor= P[Y≥18]
1-pbinom(18,26,1/3,lower.tail=FALSE)
#P-valor= P[Y≥18]
1-pbinom(18,26,1/3)
#P-valor= P[Y≥18]
1-pbinom(17,26,1/3)
#P-valor= P[Y≥18]
1-pbinom(18,26,1/3,lower.tail=TRUE)
#P-valor= P[Y≥18]
1-pbinom(17,26,1/3,lower.tail=TRUE)
#P-valor= P[Y≥18]
1-pbinom(17,26,1/3)
#P-valor= P[Y≥18]  Tener en cuenta que es una variable aleatoria discreta
1-pbinom(17,26,1/3)
pbinom(17,26,1/3,lower.tail=FALSE)
binom.test(O1,n,valor hipotético, alternative, conf.level)
# binom.test(O1,n,valor hipotético, alternative, conf.level)
binom.test(18,26,1/3,alternative="greater")
pbinom(18,26,1/3)
#P-valor= P[Y≥18]  Tener en cuenta que es una variable aleatoria discreta
1-pbinom(17,26,1/3)
#La opción lower.tail permite calcular P(X>x)
pbinom(17,26,1/3,lower.tail=FALSE)#lower.tail=FALSE  (en intervalos)
pbinom(18,26,1/3)
1-pbinom(18,26,1/3)
#P-valor= P[Y≥18]  Tener en cuenta que es una variable aleatoria discreta
1-pbinom(17,26,1/3)
#La opción lower.tail permite calcular P(X>x)
pbinom(17,26,1/3,lower.tail=FALSE)#lower.tail=FALSE  (en intervalos)
1-pbinom(18,26,1/3)
pbinom(18,26,1/3,log.p = T)
#P-valor= P[Y≥18]  Tener en cuenta que es una variable aleatoria discreta
1-pbinom(17,26,1/3)
#La opción lower.tail permite calcular P(X>x)
pbinom(17,26,1/3,lower.tail=FALSE)#lower.tail=FALSE  (en intervalos)
pbinom(18,26,1/3,log.p = T)
pbinom(18,26,1/3,log.p = F)
#P-valor= P[Y≥18]  Tener en cuenta que es una variable aleatoria discreta
1-pbinom(17,26,1/3)
#La opción lower.tail permite calcular P(X>x)
pbinom(17,26,1/3,lower.tail=FALSE)#lower.tail=FALSE  (en intervalos)
pbinom(18,26,1/3,log.p = F)
1-pbinom(18,26,1/3,log.p = F)
#P-valor= P[Y≥18]  Tener en cuenta que es una variable aleatoria discreta
1-pbinom(17,26,1/3)
#La opción lower.tail permite calcular P(X>x)
pbinom(17,26,1/3,lower.tail=FALSE)#lower.tail=FALSE  (en intervalos)
1-pbinom(18,26,1/3,log.p = F)
#P-valor= P[Y≥18]  Tener en cuenta que es una variable aleatoria discreta
1-pbinom(17,26,1/3)
#La opción lower.tail permite calcular P(X>x)
pbinom(17,26,1/3,lower.tail=FALSE)#lower.tail=FALSE  (en intervalos)
# binom.test(O1,n,valor hipotético, alternative, conf.level)
binom.test(18,26,1/3,alternative="greater")
binom.test(18,26,1/3,alternative="greater",conf.level = 0.05)
#greater (mayor) H1:π>1/3
# binom.test(O1,n,valor hipotético, alternative, conf.level)
binom.test(18,26,1/3,alternative="greater",conf.level = 0.05)
binom.test(18,26,1/3,alternative="two.sided")
binom.test(18,26,1/3,alternative="two.sided",conf.level = 0.05)
binom.test(18,26,1/3,alternative="two.sided",conf.level = 0.95)
#greater (mayor) H1:π>1/3
# binom.test(O1,n,valor hipotético, alternative, conf.level)
binom.test(18,26,1/3,alternative="greater",conf.level = 0.95)
library("readxl")
Caso<- read_excel("Caso 1.xlsx")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library("readxl")
Caso<- read_excel("Caso 1.xlsx")
sum(Caso$Concurrencia>5)
tabla<-c(19,31)
barplot(tabla,col=4)
#Prueba de hip?tesis
binom.test(19,50,0.4,"g")
#Intervalo de confianza
binom.test(19,50,conf.level = 0.97)
binom.test(19,50,conf.level = 0.97)
plot.ecdf(Caso$Monto,col=3)
Caso$Monto
plot.ecdf(Caso$Monto,col=3)
hist(Caso$Monto,col=2)
boxplot(Caso$Monto,col=4,horizontal = T)
hist(Caso$Monto,col=2)
boxplot(Caso$Monto,col=4,horizontal = T)
library(vioplot)
vioplot(Caso$Monto,col=5,horizontal=T)
ks.test(Caso$Monto,"punif",min(Caso$Monto),max(Caso$Monto))
ks.test(Caso$Monto,"punif",min(Caso$Monto),max(Caso$Monto))
Caso$Mont
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library("readxl")
Caso<- read_excel("Caso 1.xlsx")
sum(Caso$Concurrencia>5)
tabla<-c(19,31)
barplot(tabla,col=4)
#Prueba de hip?tesis
binom.test(19,50,0.4,"g")
#Intervalo de confianza
binom.test(19,50,conf.level = 0.97)
###############################
#Prueba de Kolmogorov-Smirnov : Pregunta 2 a.1
###############################
plot.ecdf(Caso$Monto,col=3)
hist(Caso$Monto,col=2)
boxplot(Caso$Monto,col=4,horizontal = T)
library(vioplot)
vioplot(Caso$Monto,col=5,horizontal=T)
ks.test(Caso$Monto,"punif",min(Caso$Monto),max(Caso$Monto))
tabla2<-table(Caso$Menú?)
View(Caso)
View(Caso)
tabla2<-table(Caso$Menú?)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library("readxl")
Caso<- read_excel("Caso 1.xlsx")
sum(Caso$Concurrencia>5)
tabla<-c(19,31)
barplot(tabla,col=4)
goftest::cvm.test(Caso$Monto,"punif", estimated=T)
set.seed(30)
goftest::cvm.test(Caso$Monto,"punif", estimated=T)
goftest::cvm.test(Caso$Monto,"punif", estimated=T)
#################################################
#
#######################################
set.seed(30)
goftest::cvm.test(Caso$Monto,"punif", estimated=T)
hist(Caso$Monto)
shapiro.test(Caso$Monto)
vioplot((Caso$Monto),col=4,horizontal = T)
library(PoweR)
install.packages("PoweR")
library(PoweR)
library(PoweR)
library(PoweR)
library(PoweR)
statcomput(24,Caso$Monto)
JarqueBera(7,Caso$Monto)
tabla2<-c(14,22,11,11)
sum(tabla2)
prob<-rela/sum(rela)
rela<-c(1,2,1,3)
prob<-rela/sum(rela)
chisq.test(tabla2,p=prob)
res2<-chisq.test(tabla2,p=rela,rescale.p = T)
res2$expected
library(RVAideMemoire)
multinomial.test(as.vector(tabla2),prob)
install.packages("RVAideMemoire")
library(RVAideMemoire)
multinomial.test(as.vector(tabla2),prob)
tabla2<-table(Caso$Menú?)
barplot(tabla2,col=5)
rela<-c(2,3,4,1)
prob<-rela/sum(rela)
chisq.test(tabla2,p=prob)
res2<-chisq.test(tabla2,p=rela,rescale.p = T)
res2$expected
library(RVAideMemoire)
multinomial.test(as.vector(tabla2),prob)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library("readxl")
Caso<- read_excel("Caso 1.xlsx")
sum(Caso$Concurrencia>5)
tabla<-c(19,31)
barplot(tabla,col=4)
#Prueba de hip?tesis
binom.test(19,50,0.4,"g")
#Intervalo de confianza
binom.test(19,50,conf.level = 0.97)
###############################
#Prueba de Kolmogorov-Smirnov : Pregunta 2 a.1
###############################
plot.ecdf(Caso$Monto,col=3)
hist(Caso$Monto,col=2)
boxplot(Caso$Monto,col=4,horizontal = T)
library(vioplot)
vioplot(Caso$Monto,col=5,horizontal=T)
ks.test(Caso$Monto,"punif",min(Caso$Monto),max(Caso$Monto))
##################################
#Prueba de Ajuste a la Multinomial: Pregunta
##################################
tabla2<-table(Caso$Menú?)
barplot(tabla2,col=5)
rela<-c(2,3,4,1)
prob<-rela/sum(rela)
chisq.test(tabla2,p=prob)
res2<-chisq.test(tabla2,p=rela,rescale.p = T)
res2$expected
library(RVAideMemoire)
multinomial.test(as.vector(tabla2),prob)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library("readxl")
Caso<- read_excel("Caso 1.xlsx")
sum(Caso$Concurrencia>5)
tabla<-c(19,31)
barplot(tabla,col=4)
#Prueba de hip?tesis
binom.test(19,50,0.4,"g")
#Intervalo de confianza
binom.test(19,50,conf.level = 0.97)
###############################
#Prueba de Kolmogorov-Smirnov : Pregunta 2 a.1
###############################
plot.ecdf(Caso$Monto,col=3)
hist(Caso$Monto,col=2)
boxplot(Caso$Monto,col=4,horizontal = T)
library(vioplot)
vioplot(Caso$Monto,col=5,horizontal=T)
ks.test(Caso$Monto,"punif",min(Caso$Monto),max(Caso$Monto))
##################################
#Prueba de Ajuste a la Multinomial: Pregunta
##################################
tabla2<-table(Caso$Menú?)
barplot(tabla2,col=5)
rela<-c(2,3,4,1)
prob<-rela/sum(rela)
chisq.test(tabla2,p=prob)
res2<-chisq.test(tabla2,p=rela,rescale.p = T)
res2$expected
library(RVAideMemoire)
multinomial.test(as.vector(tabla2),prob)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library("readxl")
Caso<- read_excel("Caso 1.xlsx")
tabla2<-table(Caso$Menú?)
barplot(tabla2,col=5)
tabla2<-table(Caso$Menú?)
tabla2<-c(14,22,11,11)
sum(tabla2)
rela<-c(1,2,1,3)
prob<-rela/sum(rela)
chisq.test(tabla2,p=prob)
res2<-chisq.test(tabla2,p=rela,rescale.p = T)
res2$expected
library(RVAideMemoire)
multinomial.test(as.vector(tabla2),prob)
res2<-chisq.test(tabla2,p=rela,rescale.p = T)
res2$expected
res2$expected
res2<-chisq.test(tabla2,p=rela,rescale.p = T)
res2
tabla2<-c(14,22,11,11)
sum(tabla2)
rela<-c(1,2,1,3)
prob<-rela/sum(rela)
chisq.test(tabla2,p=prob)
res2<-chisq.test(tabla2,p=rela,rescale.p = T)
res2$expected
library(RVAideMemoire)
multinomial.test(as.vector(tabla2),prob)
library("readxl")
Caso<- read_excel("Caso 1.xlsx")
sum(Caso$Concurrencia>5)
tabla<-c(19,31)
barplot(tabla,col=4)
#Prueba de hip?tesis
binom.test(19,50,0.4,"g")
#Intervalo de confianza
binom.test(19,50,conf.level = 0.97)
###############################
#Prueba de Kolmogorov-Smirnov : Pregunta 2 a.1
###############################
plot.ecdf(Caso$Monto,col=3)
hist(Caso$Monto,col=2)
boxplot(Caso$Monto,col=4,horizontal = T)
library(vioplot)
vioplot(Caso$Monto,col=5,horizontal=T)
ks.test(Caso$Monto,"punif",min(Caso$Monto),max(Caso$Monto))
tabla2<-table(Caso$Menú?)
tabla2<-table(Caso$Menú)
tabla2
barplot(tabla2,col=5)
rela<-c(2,3,4,1)
prob<-rela/sum(rela)
chisq.test(tabla2,p=prob)
res2<-chisq.test(tabla2,p=rela,rescale.p = T)
res2$expected
library(RVAideMemoire)
multinomial.test(as.vector(tabla2),prob)
tabla2<-c(14,22,11,11)
sum(tabla2)
rela<-c(1,2,1,3)
prob<-rela/sum(rela)
chisq.test(tabla2,p=prob)
res2<-chisq.test(tabla2,p=rela,rescale.p = T)
res2$expected
library(RVAideMemoire)
multinomial.test(as.vector(tabla2),prob)
multinomial.test(as.vector(tabla2),prob)
