Caso<- read_excel("Caso1.xlsx")
nrow(Caso)
sum(Caso$Concurrencia>5) #cumplen con la condicion
#binom.test(cant.éxitos(de la muestra), #obs. totales, val. hipotético(pi0),"g" )
binom.test(19,50,0.4,"g")
Caso$Concurrencia>5
sum(Caso$Concurrencia>5)
binom.test(19,50,0.4,"t",0.97)
#Gráficos opcionales
library(vioplot)
par(mfrow=c(2,1))
boxplot(resta$Monto,col=4)
#Gráficos opcionales
library(vioplot)
par(mfrow=c(2,1))
boxplot(resta$Monto,col=4)
View(Caso)
View(Caso)
#Gráficos opcionales
library(vioplot)
par(mfrow=c(2,1))
boxplot(Caso$Monto,col=4)
plot(density(Caso$Monto),col=4)
#Gráfico de violín:
par(mfrow=c(1,1))
vioplot(Caso$Monto,col=4,horizontal=T)
#Nota: por las curvas es probable de que los datos no se ajusten a una uniforme
#Gráfica de la dist. acumulada empírica
plot.ecdf(Caso$Monto,col=3)
###PRUEBA
#ks.test(variable,"dist teórica",como estimarías los parámetros en base a esa dist)
ks.test(Caso$Monto,"punif",min(Caso$Monto),
max(Caso$Monto))
###PRUEBA
#ks.test(variable,"dist teórica",como estimarías los parámetros en base a esa dist)
ks.test(Caso$Monto,"punif",min(Caso$Monto),
max(Caso$Monto))
###PRUEBA
#ks.test(variable,"dist teórica",como estimarías los parámetros en base a esa dist)
ks.test(Caso$Monto,"punif",min(Caso$Monto),
max(Caso$Monto))
###PRUEBA
#ks.test(variable,"dist teórica",como estimarías los parámetros en base a esa dist)
ks.test(Caso$Monto,"punif",min(Caso$Monto), max(Caso$Monto))
#########################################################
#Prueba Chi Cuadrado de Pearson: Ajuste a la multinomial#
#########################################################
tabla<-table(resta$Menú)
#########################################################
#Prueba Chi Cuadrado de Pearson: Ajuste a la multinomial#
#########################################################
tabla<-table(Caso$Menú)
prob<-c(1,1,1,1)/4
# Método exacto
library(RVAideMemoire)
#Pasar la tabla inicial a vector
tabla1<-as.vector(tabla)
multinomial.test(tabla1,prob)
###################################
## Prueba de Anderson-Darling: Pregunta 2 a2
#######################################
hist(Caso$Monto)
library(goftest)
set.seed(30)
goftest::ad.test(Caso$Monto,"punif", estimated=T)
library(goftest)
set.seed(30)
goftest::ad.test(Caso$Monto,"punif", estimated=T)
#######################
#Prueba de Shapiro-Wilk
#######################
library(vioplot)
vioplot(Caso$Monto,col=4,horizontal = T)
shapiro.test(Caso$Monto)
#######################
#Prueba de Shapiro-Wilk
#######################
#library(vioplot)
#vioplot(Caso$Monto,col=4,horizontal = T)
shapiro.test(Caso$Monto)
###################################
#Prueba de Anderson-Darling: Pregunta 2 a2
#######################################
hist(Caso$Monto)
library(goftest)
set.seed(30)
goftest::ad.test(Caso$Monto,"punif", estimated=T)
############################
#Prueba de Cramer von Mises:
############################
goftest::cvm.test(Caso$Monto,"punif", estimated=T)
#######################
#Prueba de Shapiro-Wilk
#######################
library(vioplot)
vioplot(Caso$Monto,col=4,horizontal = T)
shapiro.test(Caso$Monto)
#####################
#Prueba de D?Agostino
#####################
library(fBasics)
###################################
#Prueba de Anderson-Darling: Pregunta 2 a2
#######################################
hist(Caso$Monto)
library(goftest)
set.seed(30)
goftest::ad.test(Caso$Monto,"punif", estimated=T)
############################
#Prueba de Cramer von Mises:
############################
goftest::cvm.test(Caso$Monto,"punif", estimated=T)
#######################
#Prueba de Shapiro-Wilk
#######################
library(vioplot)
vioplot(Caso$Monto,col=4,horizontal = T)
shapiro.test(Caso$Monto)
#####################
#Prueba de D?Agostino
#####################
library(fBasics)
install.packages("fBasics")
###################################
#Prueba de Anderson-Darling: Pregunta 2 a2
#######################################
hist(Caso$Monto)
library(goftest)
set.seed(30)
goftest::ad.test(Caso$Monto,"punif", estimated=T)
############################
#Prueba de Cramer von Mises:
############################
goftest::cvm.test(Caso$Monto,"punif", estimated=T)
#######################
#Prueba de Shapiro-Wilk
#######################
library(vioplot)
vioplot(Caso$Monto,col=4,horizontal = T)
shapiro.test(Caso$Monto)
#####################
#Prueba de D?Agostino
#####################
library(fBasics)
dagoTest(Caso$Monto)
######################
#Prueba de Jarque-Bera
######################
library(moments)
jarque.test(Caso$Monto)
library(fBasics)
jarqueberaTest(Caso$Monto)
######################
#Prueba de Lilliefors
######################
library(nortest)
lillie.test(Caso$Monto)
######################
#Prueba de Jarque-Bera
######################
library(moments)
jarque.test(Caso$Monto)
library(fBasics)
jarqueberaTest(Caso$Monto)
tabla2<-table(Caso$Menú)
barplot(tabla2,col=5)
rela<-c(2,3,4,1)
prob<-rela/sum(rela)
chisq.test(tabla2,p=prob)
res2<-chisq.test(tabla2,p=rela,rescale.p = T)
res2$expected
library(RVAideMemoire)
multinomial.test(as.vector(tabla2),prob)
tabla2<-table(Caso$Menú)
barplot(tabla2,col=5)
rela<-c(2,3,4,1)
prob<-rela/sum(rela)
chisq.test(tabla2,p=prob)
res2<-chisq.test(tabla2,p=rela,rescale.p = T)
res2$expected
library(RVAideMemoire)
multinomial.test(as.vector(tabla2),prob)
tabla2<-table(Caso$Menú)
barplot(tabla2,col=5)
rela<-c(2,3,4,1)
prob<-rela/sum(rela)
chisq.test(tabla2,p=prob)
res2<-chisq.test(tabla2,p=rela,rescale.p = T)
res2$expected
# Pvalor exacto
library(RVAideMemoire)
multinomial.test(as.vector(tabla2),prob)
#########################################################
#Prueba Chi Cuadrado de Pearson: Ajuste a la multinomial#
#########################################################
tabla<-table(resta$Menú)
#########################################################
#Prueba Chi Cuadrado de Pearson: Ajuste a la multinomial#
#########################################################
tabla<-table(Caso$Menú)
prob<-c(1,1,1,1)/4
# Método exacto
library(RVAideMemoire)
#Pasar la tabla inicial a vector
tabla1<-as.vector(tabla)
multinomial.test(tabla1,prob)
#################################################################
#Prueba Chi Cuadrado de Pearson-Ajuste a una distribuci?n te?rica: Pregunta 5
#################################################################
tabla3<-table(Caso$Postres)
plot(tabla3,col=4)
proba<-dbinom(0:5,5,0.5)
res4<-chisq.test(tabla3,p=proba)
res4$expected
tabla4<-c(sum(tabla3[1:2]),tabla3[3:4],sum(tabla3[5:6]))
proba4<-c(sum(proba[1:2]),proba[3:4],sum(proba[5:6]))
chisq.test(tabla4,p=proba4)
qchisq(0.03,3,lower.tail = F)
library(fastGraph)
shadeDist(qchisq(0.03,3,lower.tail = F),"dchisq",3,lower.tail=F)
#################################################################
#Prueba Chi Cuadrado de Pearson-Ajuste a una distribuci?n te?rica: Pregunta 5
#################################################################
tabla3<-table(Caso$Postres)
plot(tabla3,col=4)
proba<-dbinom(0:5,5,0.5)
res4<-chisq.test(tabla3,p=proba)
res4$expected
tabla4<-c(sum(tabla3[1:2]),tabla3[3:4],sum(tabla3[5:6]))
proba4<-c(sum(proba[1:2]),proba[3:4],sum(proba[5:6]))
chisq.test(tabla4,p=proba4)
qchisq(0.03,3,lower.tail = F)
library(fastGraph)
shadeDist(qchisq(0.03,3,lower.tail = F),"dchisq",3,lower.tail=F)
tabla3<-table(Caso$Postres)
tabla3
plot(tabla3,col=4)
proba<-dbinom(0:5,5,0.5)
proba<-dbinom(0:5,5,0.5)
#################################################################
#Prueba Chi Cuadrado de Pearson-Ajuste a una distribuci?n te?rica: Pregunta 5
#################################################################
tabla3<-table(Caso$Postres) # frecuencia de consumidores por  cantidad de postre
plot(tabla3,col=4)
proba<-dbinom(0:5,5,0.5)
res4<-chisq.test(tabla3,p=proba)
res4$expected
tabla4<-c(sum(tabla3[1:2]),tabla3[3:4],sum(tabla3[5:6]))
proba4<-c(sum(proba[1:2]),proba[3:4],sum(proba[5:6]))
chisq.test(tabla4,p=proba4)
qchisq(0.03,3,lower.tail = F)
library(fastGraph)
shadeDist(qchisq(0.03,3,lower.tail = F),"dchisq",3,lower.tail=F)
#################################################################
#Prueba Chi Cuadrado de Pearson-Ajuste a una distribuci?n te?rica: Pregunta 5
#################################################################
tabla3<-table(Caso$Postres) # frecuencia de consumidores por  cantidad de postre
plot(tabla3,col=4)
proba<-dbinom(0:5,5,0.5)
res4<-chisq.test(tabla3,p=proba)
res4$expected
tabla4<-c(sum(tabla3[1:2]),tabla3[3:4],sum(tabla3[5:6]))
proba4<-c(sum(proba[1:2]),proba[3:4],sum(proba[5:6]))
chisq.test(tabla4,p=proba4)
qchisq(0.03,3,lower.tail = F)
library(fastGraph)
shadeDist(qchisq(0.03,3,lower.tail = F),"dchisq",3,lower.tail=F)
res4$expected
res4$expected
tabla4
tabla3<-table(Caso$Postres)
tabla3
plot(tabla3,col=4)
proba<-dbinom(0:5,5,0.5)
proba
res4$expected # Revisar
sum(tabla3[1:2])
tabla3[1:2]
tabla3
res4
res4$expected # Revisar
proba<-dbinom(0:5,5,0.5)
proba
tabla3<-table(Caso$Postres)
res4<-chisq.test(tabla3,p=proba)
res4$expected
tabla4<-c(sum(tabla3[1:2]),tabla3[3:4],sum(tabla3[5:6]))
tabla4
tabla3
tabla3<-table(Caso$Postres)
#################################################################
#Prueba Chi Cuadrado de Pearson-Ajuste a una distribuci?n te?rica: Pregunta 5
#################################################################
tabla3<-table(Caso$Postres) # frecuencia de consumidores por  cantidad de postre
plot(tabla3,col=4)
proba<-dbinom(0:5,5,0.5)
res4<-chisq.test(tabla3,p=proba)
res4$expected # si tienen valores esperados menores a 5 se agrupan
tabla4<-c(sum(tabla3[1:2]),tabla3[3:4],sum(tabla3[5:6]))
proba4<-c(sum(proba[1:2]),proba[3:4],sum(proba[5:6]))
chisq.test(tabla4,p=proba4)
qchisq(0.03,3,lower.tail = F)#alfa
library(fastGraph)
shadeDist(qchisq(0.03,3,lower.tail = F),"dchisq",3,lower.tail=F)
chisq.test(tabla2,p=prob)
prob
#################
#Prueba de Rachas: Pregunta 6
#################
library(tseries)
me<-median(Caso$Concurrencia)
x<-factor(Caso$Concurrencia>me)
tseries::runs.test(x)
library(fastGraph)
shadeDist(qnorm(c(0.03/2,1-0.03/2)),"dnorm")
#################
#Prueba de Rachas: Pregunta 6
#################
library(tseries)
me<-median(Caso$Concurrencia)
x<-factor(Caso$Concurrencia>me)
tseries::runs.test(x)
library(fastGraph)
shadeDist(qnorm(c(0.03/2,1-0.03/2)),"dnorm")
###############################
#Prueba de Simetr?a: Pregunta 7
################################
plot(table(Caso$Satisfacción),col=4)
library(lawstat)
symmetry.test(Caso$Satisfacción,boot=F,option="CM")
symmetry.test(Caso$Satisfacción,boot=F,option="M")
symmetry.test(Caso$Satisfacción,boot=F,option="MGG")
###############################
#Prueba de Simetr?a: Pregunta 7
################################
plot(table(Caso$Satisfacción),col=4)
library(lawstat)
symmetry.test(Caso$Satisfacción,boot=F,option="CM")
symmetry.test(Caso$Satisfacción,boot=F,option="M")
symmetry.test(Caso$Satisfacción,boot=F,option="MGG")
###############################
#Prueba de Simetr?a: Pregunta 7
################################
plot(table(Caso$Satisfacción),col=4)
library(lawstat)
symmetry.test(Caso$Satisfacción,boot=F,option="CM")
symmetry.test(Caso$Satisfacción,boot=F,option="M")
symmetry.test(Caso$Satisfacción,boot=F,option="MGG")
########################################
#Prueba de Signos y Wilcoxon: Pregunta 7
########################################
library(exactRankTests)
wilcox.exact(Caso$Satisfacci?n,mu=7,alternative="l")
install.packages("exactRankTests")
knitr::opts_chunk$set(echo = TRUE)
########################################
#Prueba de Signos y Wilcoxon: Pregunta 7
########################################
library(exactRankTests)
wilcox.exact(Caso$Satisfacción,mu=7,alternative="l")
#Intervalo de confianza
wilcox.exact(Caso$Satisfacción,conf.int=TRUE,conf.level=0.97)
install.packages("coin")
########################################
#Prueba de Signos y Wilcoxon: Pregunta 7
########################################
library(coin)
library(exactRankTests)
wilcox.exact(Caso$Satisfacción,mu=7,alternative="l")
#Intervalo de confianza
wilcox.exact(Caso$Satisfacción,conf.int=TRUE,conf.level=0.97)
########################################
#Prueba de Signos y Wilcoxon: Pregunta 7
########################################
library(coin)
library(exactRankTests)
wilcox.exact(Caso$Satisfacción,mu=7,alternative="l")
#Intervalo de confianza
wilcox.exact(Caso$Satisfacción,conf.int=TRUE,conf.level=0.97)
# Intervalo de confianza
#Siempre: tipo de prueba ="t"
wilcox.exact(resta$Satisfacción,mu=7,alternative="t",
conf.int=T,conf.level=0.97)
# Intervalo de confianza
#Siempre: tipo de prueba ="t"
wilcox.exact(Caso$Satisfacción,mu=7,alternative="t",
conf.int=T,conf.level=0.97)
#########################
#   Prueba de Grubbs
#########################
library(outliers)
#Two.side=T: superior o inferior
grubbs.test(resta$Monto,type=10,two.sided=T)
#########################
#   Prueba de Grubbs
#########################
library(outliers)
#Two.side=T: superior o inferior
grubbs.test(Caso$Monto,type=10,two.sided=T)
#Prueba de Signos y Wilcoxon: Pregunta 7
library(coin)
library(exactRankTests)
wilcox.exact(Caso$Satisfacción,mu=7,alternative="l")
#Intervalo de confianza
wilcox.exact(Caso$Satisfacción,conf.int=TRUE,conf.level=0.97)
#Prueba de Signos y Wilcoxon: Pregunta 7
library(coin)
library(exactRankTests)
wilcox.exact(Caso$Satisfacción,mu=7,alternative="l")
#Intervalo de confianza
wilcox.exact(Caso$Satisfacción,conf.int=TRUE,conf.level=0.97)
#Prueba de Signos y Wilcoxon: Pregunta 7
library(coin)
library(exactRankTests)
wilcox.exact(Caso$Satisfacción,mu=7,alternative="l")
#Intervalo de confianza
wilcox.exact(Caso$Satisfacción,conf.int=TRUE,conf.level=0.97)
#Prueba de Signos y Wilcoxon: Pregunta 7
###################
#Prueba de Wilcoxon
###################
#Método exacto (Usar este!)
library(exactRankTests)
#wilcox.exact(resta$Satisfacción,mu=valor hipotético,alternative="ltipo de prueba")
wilcox.exact(resta$Satisfacción,mu=7,alternative="l")
goftest::ad.test(primer$Tiempo,"pexp",1/mean(primer$Tiempo), estimated = F)
#Pregunta 1: Anderson -Darling
primer<-subset(feria,Dia=="Primer")
library(goftest)
goftest::ad.test(primer$Tiempo,"pexp",1/mean(primer$Tiempo), estimated = F)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library("readxl")
feria<- read_excel("PD1 (1).xlsx")
library(pacman)
p_load("goftest","vioplot","RVAideMemoire2","PoweR",
"moments","tseries","lawstat","exactRankTests",
"BSDA","outliers")
#Pregunta 1: Anderson -Darling
primer<-subset(feria,Dia=="Primer")
library(goftest)
goftest::ad.test(primer$Tiempo,"pexp",1/mean(primer$Tiempo), estimated = F)
primer<-subset(feria,Dia=="Primer")
library(goftest)
goftest::ad.test(primer$Tiempo,"pexp",1/mean(primer$Tiempo), estimated = F)
#alfa=0.02
library(tseries)
runs.test(as.factor(primer$Gasto>100))
primer$Gasto>100
as.factor(primer$Gasto>100)
runs.test(as.factor(primer$Gasto>100))
#alfa=0.02
library(tseries)
runs.test(as.factor(primer$Gasto>100))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library("readxl")
feria<- read_excel("PD1 (1).xlsx")
feria
str(feria)
#alfa=0.02
library(tseries)
runs.test(as.factor(primer$Gasto>100))
library(tseries)
me<-median(primer$Gasto)
x<-factor(Cprimer$Gasto>me)
me<-median(primer$Gasto)
x<-factor(primer$Gasto>me)
tseries::runs.test(x)
tseries::runs.test(as.factor(primer$Gasto>100))
library(tseries)
tseries::runs.test(as.factor(primer$Gasto>100))
np<-primer$Nplatos>3
table(np)
np<-primer$Nplatos>3
table(np)
#binom.test(#TRUE ,TOTALNP,PROPORCION,"g")
binom.test(13,30,0.3,"g")
#alfa=0.02
np<-primer$Nplatos>3
table(np)
#binom.test(#TRUE ,TOTALNP,PROPORCION,"g")
binom.test(13,30,0.3,"g")
tabla<-table(primer$Plato)
prob<-c(0.12,0.40,0.15,0.15,0.18)
res<-chisq.test(tabla,p=prob)
res$expected
library(RVAideMemoire)
multinomial.test(as.vector(tabla),prob)
tabla<-table(primer$Plato)
prob<-c(0.12,0.40,0.15,0.15,0.18)
res<-chisq.test(tabla,p=prob)
res$expected
library(RVAideMemoire)
multinomial.test(as.vector(tabla),prob)
p_load("goftest","vioplot","RVAideMemoire2","PoweR",
"moments","tseries","lawstat","exactRankTests",
"BSDA","outliers","EnvStats")
library(exactRankTests)
wilcox.exact(Caso$Satisfacci?n,mu=7,alternative="l")
library(lawstat)
symmetry.test(primer$Personas,option="MGG",boot=F)
library(exactRankTests)
wilcox.exact(primer$Personas,mu=3,alternative="l")
wilcox.exact(primer$Personas,alternative="t",conf.int = T,
conf.level = 0.98)
library(lawstat)
symmetry.test(primer$Personas,option="MGG",boot=F)
library(exactRankTests)
wilcox.exact(primer$Personas,mu=3,alternative="l")
wilcox.exact(primer$Personas,alternative="t",conf.int = T,
conf.level = 0.98)
