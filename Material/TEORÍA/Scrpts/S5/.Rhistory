#Lectura de datos
tele<-read.delim("clipboard")
library(PairedData)
#Se crea un subconjunto de lo que te piden, es este caso: género femenino
fem<-subset(tele,Género=="Femenino")
mas<-subset(tele,Género=="Masculino")
View(mas)
#Primero se prueba simetría
symmetry.test(mas$WebA-mas$WebD, boot=F)
#Ho:As=0
#H1!=0
#alfa=0.04
library(lawstat)
#Primero se prueba simetría
symmetry.test(mas$WebA-mas$WebD, boot=F)
#Prueba
grambsch.Var.test(mas$WebA, mas$WebD,alternative="g")
#Análisis gráfico
plot.ecdf(fem$Ingresos, col=4)
plot.ecdf(mas$Ingresos, col=6, add=T )
#Prueba
ks,test(mas$Ingresos, fem$Ingresos)
z = 0.97213
#Prueba
ks.test(mas$Ingresos, fem$Ingresos)
vioplot(datos1,datos2,col=3, horizontal=T)
library(vioplot)
vioplot(datos1,datos2,col=3, horizontal=T)
vioplot(tele,datos2,col=3, horizontal=T)
vioplot(fem$Ingresos, mas$Ingresos,datos2,col=3, horizontal=T)
vioplot(fem$Ingresos, mas$Ingresos,col=3, horizontal=T)
#Lectura de datos
tele<-read.delim("clipboard")
#Se crea un subconjunto de lo que te piden, es este caso: género femenino
fem<-subset(tele,Género=="Femenino")
mas<-subset(tele,Género=="Masculino")
###############################################
# Pregunta 2 -PRUEBA DE MANN WHITNEY O FLIGNER#
###############################################
#Gráficamente
library(vioplot)
vioplot(mas$Ingresos,fem$Ingresos,col= , horixontal=T)
vioplot(mas$Ingresos,fem$Ingresos,col= , horizontal=T)
vioplot(mas$Ingresos,fem$Ingresos,col=6, horizontal=T)
#Prueba
library(exactRankTests
#Prueba
library(exactRankTests)
#Prueba
library(exactRankTests)
wilcox.exact(fem$Ingresos, mas$Ingresos, alternative = "g", mu=10)
wilcox.exact(fem$Ingresos, mas$Ingresos, alternative = "g", mu=10, paired=F)
#INtervalo de confianza para la diferencia de medianas
wilcox.exact(fem$Ingresos, mas$Ingresos, alternative = "t", mu=10, paired=F, conf.level = 0.96)
#INtervalo de confianza para la diferencia de medianas
wilcox.exact(fem$Ingresos, mas$Ingresos, alternative = "t", paired=F, conf.level = 0.96)
wilcox.exact(fem$Ingresos, mas$Ingresos, alternative = "t", paired=F, conf.level = 0.96)
View(tele)
library(vioplot)
vioplot(mas$Ingresos,fem$Ingresos,col=6, horizontal=T)
vioplot(mas$Familiaridad,fem$Familiaridad,col=6, horizontal=T)
wilcox.exact(fem$Familiaridad, mas$Familiaridad, alternative = "t", mu=0, paired=F)
ks.test(mas$Familiaridad, fem$Familiaridad)
ks.test(mas$Familiaridad, fem$Familiaridad)
library(RVAideMemoire)
fp.test(mas$Familiaridad,fem$Familiaridad,  alternative = "t", mu=0, paired=F)
fp.test(mas$Familiaridad,fem$Familiaridad,  alternative = "t", mu=0, paired=F)
fp.test(mas$Familiaridad,fem$Familiaridad,  alternative = "t", mu=0, paired=F)
symmetry.test(mas$Familiaridad-mas$Familiaridad, boot=F)
###########################################
# Pregunta 3 -PRUEBA DE GRAMBSCH          #
###########################################
library(PairedData)
symmetry.test(mas$Familiaridad-mas$Familiaridad, boot=F)
symmetry.test(mas$Familiaridad-mas$Familiaridad, boot=F)
###########################################
# Pregunta 3 -PRUEBA DE GRAMBSCH          #
###########################################
library(PairedData)
symmetry.test(mas$Familiaridad-mas$Familiaridad, boot=F)
#Ho:As=0
#H1!=0
#alfa=0.04
library(lawstat)
symmetry.test(mas$Familiaridad-mas$Familiaridad, boot=F)
symmetry.test(mas$Familiaridad-fem$Familiaridad, boot=F)
#Prueba de forma:
ks.test(mas$Familiaridad, fem$Familiaridad)
#Prueba de asimetría
symmetry.test(mas$Familiaridad, boot=F)
symmetry.test(fem$Familiaridad, boot=F)
library(RVAideMemoire)
fp.test(mas$Familiaridad,fem$Familiaridad,  alternative = "t", mu=0, pval=paired=F)
fp.test(mas$Familiaridad,fem$Familiaridad,  alternative = "t", mu=0, =paired=F)
fp.test(mas$Familiaridad,fem$Familiaridad,  alternative = "t", mu=0, paired=F)
fp.test(mas$Familiaridad,fem$Familiaridad,  alternative = "twoside", mu=0,paired=F)
fp.test(mas$Familiaridad,fem$Familiaridad,  alternative = "two.side",paired=F)
fp.test(mas$Familiaridad,fem$Familiaridad,  alternative = "two.side")
library(RVAideMemoire)
fp.test(mas$Familiaridad, fem$Familiaridad,  alternative = "two.side")
fp.test(mas$Familiaridad, fem$Familiaridad,  alternative = "two.sided")
help(fp.test)
###############################################
# Pregunta 4 -PRUEBA DE CONOVER               #
###############################################
library(coin)
###############################################
# Pregunta 4 -PRUEBA DE CONOVER               #
###############################################
boxplot(tele$Horas)
###############################################
# Pregunta 4 -PRUEBA DE CONOVER               #
###############################################
boxplot(tele$Horas~tele$Género)
conover_test(tele$Horas~as.factor(tele$Género))
###############################################
# Pregunta 4 -PRUEBA DE MOSES                 #
###############################################
library(DescTools)
install.packages("DescTools")
MosesTest(fem$Horas,mas$Horas)
###############################################
# Pregunta 4 -PRUEBA DE MOSES                 #
###############################################
library(DescTools)
MosesTest(fem$Horas,mas$Horas)
#Lectura de datos
datos<-read.delim("clipboard")
library(exact2x2)
View(datos)
mcnemar.exact(datos$PC1, datos$PC2)
#Lectura de datos
tele<-read.delim("clipboard")
#Se crea un subconjunto de lo que te piden, es este caso: género femenino
fem<-subset(tele,Género=="Femenino")
mas<-subset(tele,Género=="Masculino")
###############################
# Pregunta 5 -PRUEBA DE MOOD  #
###############################
#Probando
library(exactRankTests)
wilcox.exact(fem$Ingresos, mas$Ingresos, alternative = "g", mu=10, paired=F)
wilcox.exact(fem$Ingresos, mas$Ingresos, alternative = "g", mu=0, paired=F)
#Probando forma:
ks.test(mas$Ingresos, fem$Ingresos)
wilcox.exact(mas$Ingresos, fem$Ingresos, alternative = "g", mu=0, paired=F)
wilcox.exact(mas$Ingresos, fem$Ingresos, alternative = "t", mu=0, paired=F)
#Probando forma:
ks.test(mas$Ingresos, fem$Ingresos)
wilcox.exact(mas$Ingresos, fem$Ingresos, alternative = "g", mu=0, paired=F)
mood.test(fem$Horas,mas$Horas, alternative="T")
#Otra manera
###############################################
# Pregunta 4 -PRUEBA DE MOSES                 #
###############################################
library(DescTools)
mood.test(fem$Horas,mas$Horas, alternative="T")
mood.test(fem$Horas,mas$Horas, alternative="t")
wilcox.exact(mas$Ingresos, fem$Ingresos, alternative = "g", mu=0, paired=F)
wilcox.exact(mas$Ingresos, fem$Ingresos, alternative = "t", mu=0, paired=F)
library(exactRankTests)
ansari.exact(mas$Ingresos,fem$Ingresos, alternative = "greater")
ansari.exact(mas$Ingresos,fem$Ingresosalternative = "greater")
ansari.exact(mas$Ingresos,fem$Ingresos, alternative = "greater")
ansari.test(mas$Ingresos,fem$Ingresos, alternative = "greater")
library(DescTools)
SiegelTukeyTest(mas$Ingresos,fem$Ingresos, alternative = "greater")
SiegelTukeyTest(mas$Ingresos,fem$Ingresos, alternative = "g)
SiegelTukeyTest(mas$Ingresos,fem$Ingresos, alternative = "g")
SiegelTukeyTest(mas$Ingresos,fem$Ingresos, alternative = "g")
ansari.exact(mas$Ingresos,fem$Ingresos, alternative = "g")
banco<-read.delim("clipboard")
#Pregunta 1
library(exact2x2)
View(banco)
#Pregunta 1
clasica= subset(banco,Tarjeta=="Clásica")
library(exact2x2)
mcnemar.exact(clasica$Catenov, clasica$Catedic)
#Pregunta 2
plateada=subset(banco,Tarjeta=="Plateada")
#Prueba
ks.test(banco$clasica, banco$plateada)
#Prueba
ks.test(Tarjeta$Clásica, Tarjeta$Plateada)
#Prueba
ks.test(clasica$Deunov,plateada$Deunov)
#Pregunta 2
plateada=subset(banco,Tarjeta=="Plateada")
#Prueba
ks.test(clasica$Deunov,plateada$Deunov)
library(vioplot)
vioplot(clasica$Deunov,plateada$Deunov,col=3, horizontal=T)
tapply(banco$Tarjeta)
tapply(banco$Tarjeta)
tapply(banco$Tarjeta,median)
tapply(banco$Tarjeta, median)
#Pregunta 3
library(lawstat)
#Prueba
ks.test(clasica$Deudic,plateada$Deudic)
library(exactRankTests)
wilcox.exact(clasica$Deudic,plateada$Deudic, alternative = "g", mu=0.1, paired=F)
wilcox.exact(clasica$Deudic,plateada$Deudic, alternative = "t", paired=F, conf.level = 0.96)
wilcox.exact(clasica$Deudic,plateada$Deudic, alternative = "t", paired=F, conf.level = 0.97)
wilcox.exact(clasica$Deudic,plateada$Deudic, alternative = "t",mu=0, paired=F, conf.level = 0.97)
wilcox.exact(clasica$Deudic,plateada$Deudic, alternative = "t",mu=0, paired=F,conf.int = T, conf.level = 0.97)
wilcox.exact(clasica$Deudic,plateada$Deudic, alternative = "t", paired=F,conf.int = T, conf.level = 0.97)
library(coin)
conover_test(clasica$Deudic~plateada$Deudic)
library(coin)
conover_test(clasica$Deudic~plateada$Deudic)
#pvalor= 0.7222>alfa, no se rechaza H0
help(conover_test)
View(banco)
conover_test(clasica$Deudic,plateada$Deudic)
conover_test(clasica$Deudic,plateada$Deudic,banco)
conover_test(as.factor(clasica$Deudic),as.factor(plateada$Deudic),banco)
conover_test(as.factor(clasica$Deudic)~as.factor(plateada$Deudic),banco)
conover_test(clasica$Deudic,plateada$Deudic ,banco)
conover_test(clasica$Deudic~plateada$Deudic ,banco)
conover_test(clasica$Deudic~plateada$Deudic)
library(coin)
conover_test(clasica$Deudic~plateada$Deudic
library(coin)
conover_test(clasica$Deudic~plateada$Deudic
library(coin)
conover_test(clasica$Deudic~plateada$Deudic)
#Prueba
ks.test(clasica$Deunov,plateada$Deunov)
